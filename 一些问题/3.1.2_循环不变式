### Problem:
- 在42页的3.1.2章节分析了本章计算学习成绩程序中的循环不定式，书中说
> 在理解循环不定式（$2.3.2）的时候我们要小心，因为while的条件具有副作用。这些副作用会影响到不变式的真实性：如果我们成功地执行了 cin>>x， 那么不变式的第一部分（也就是说明了我们已经读到count个成绩的那一部分）就会为假。
```
/*程序截取*/
while( cin >> x ){
	++count;
	sum += x;
}
```
- 在Accelerated C++和算法导论中都提到了循环不定式这个概念，那么我们应该如何来理解呢？

### Solution:
-首先，应该明确的是，循环不定式(Loop invariant)是一种数学思想，实际上称其为循环不定性更合适。
-如何找循环不变式？<br>
由于算法是一步步执行的，那么如果每一步（包括初试和结束）都满足一个共同的条件，那么这个条件就是要找的循环不变式（loop invariant）。（在知乎看到说，这就是所谓的Hoare Logic（霍尔逻辑）。
- 利用循环不变式(loop invariant)来证明循环的正确性与用数学归纳法(induction)证明数学等式的相同点在于：<br>
都需要验证初值，或初始状态是否满足条件。
之后再证明在归纳或递推的过程中仍然满足这种条件。（这个条件在数学归纳中叫做递推关系，在循环中就是循环不变式(loop invariant)）。

- 循环不变式(loop invariant)与数学归纳法(induction)的区别在于：<br>
数学归纳可能是无限的，是无限地推的，但循环不变式所要证明的循环是要结束并给出正确结果的。



- $3.1.2中提示我们在先前的$2.3.2章节中更为详细的描述了循环不定式
```
//不变式：到目前为止，我们已经输出了r行
//把r设为0，让不变式为真
int r = 0;
while( r != rows ){
	//在这里，我们可以假定不变式为真
	//输出一行，令不变式为假
	std::cout << std::endl;
	//对r加1，使不变式再次为真
	++r;
}
//我们可以断定，在这里不变式为真
```
- 不变式为：到目前为止，我们已经输出了r行，我们需要让编写的程序符合两个要求：**让不变式在while语句开始之前**以及**在到达while循环体结尾的时刻**都为真，那么，我们就确保了不但在while语句每一次测试条件时不变式为真，而且在while语句终止时它也为真。
